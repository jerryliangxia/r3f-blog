{"ast":null,"code":"var parser = require('js-yaml');\nvar optionalByteOrderMark = '\\\\ufeff?';\nvar platform = typeof process !== 'undefined' ? process.platform : '';\nvar pattern = '^(' + optionalByteOrderMark + '(= yaml =|---)' + '$([\\\\s\\\\S]*?)' + '^(?:\\\\2|\\\\.\\\\.\\\\.)\\\\s*' + '$' + (platform === 'win32' ? '\\\\r?' : '') + '(?:\\\\n)?)';\n// NOTE: If this pattern uses the 'g' flag the `regex` variable definition will\n// need to be moved down into the functions that use it.\nvar regex = new RegExp(pattern, 'm');\nmodule.exports = extractor;\nmodule.exports.test = test;\nfunction extractor(string, options) {\n  string = string || '';\n  var defaultOptions = {\n    allowUnsafe: false\n  };\n  options = options instanceof Object ? {\n    ...defaultOptions,\n    ...options\n  } : defaultOptions;\n  options.allowUnsafe = Boolean(options.allowUnsafe);\n  var lines = string.split(/(\\r?\\n)/);\n  if (lines[0] && /= yaml =|---/.test(lines[0])) {\n    return parse(string, options.allowUnsafe);\n  } else {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    };\n  }\n}\nfunction computeLocation(match, body) {\n  var line = 1;\n  var pos = body.indexOf('\\n');\n  var offset = match.index + match[0].length;\n  while (pos !== -1) {\n    if (pos >= offset) {\n      return line;\n    }\n    line++;\n    pos = body.indexOf('\\n', pos + 1);\n  }\n  return line;\n}\nfunction parse(string, allowUnsafe) {\n  var match = regex.exec(string);\n  if (!match) {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    };\n  }\n  var loader = allowUnsafe ? parser.load : parser.safeLoad;\n  var yaml = match[match.length - 1].replace(/^\\s+|\\s+$/g, '');\n  var attributes = loader(yaml) || {};\n  var body = string.replace(match[0], '');\n  var line = computeLocation(match, string);\n  return {\n    attributes: attributes,\n    body: body,\n    bodyBegin: line,\n    frontmatter: yaml\n  };\n}\nfunction test(string) {\n  string = string || '';\n  return regex.test(string);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}