{"ast":null,"code":"import { useCallback as $bnPw9$useCallback, useState as $bnPw9$useState, useRef as $bnPw9$useRef, useEffect as $bnPw9$useEffect } from \"react\";\nimport { useCallbackRef as $bnPw9$useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nfunction $71cd76cc60e0454e$export$6f32135080cb4c3({\n  prop: prop,\n  defaultProp: defaultProp,\n  onChange = () => {}\n}) {\n  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({\n    defaultProp: defaultProp,\n    onChange: onChange\n  });\n  const isControlled = prop !== undefined;\n  const value1 = isControlled ? prop : uncontrolledProp;\n  const handleChange = $bnPw9$useCallbackRef(onChange);\n  const setValue = $bnPw9$useCallback(nextValue => {\n    if (isControlled) {\n      const setter = nextValue;\n      const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n      if (value !== prop) handleChange(value);\n    } else setUncontrolledProp(nextValue);\n  }, [isControlled, prop, setUncontrolledProp, handleChange]);\n  return [value1, setValue];\n}\nfunction $71cd76cc60e0454e$var$useUncontrolledState({\n  defaultProp: defaultProp,\n  onChange: onChange\n}) {\n  const uncontrolledState = $bnPw9$useState(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = $bnPw9$useRef(value);\n  const handleChange = $bnPw9$useCallbackRef(onChange);\n  $bnPw9$useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n  return uncontrolledState;\n}\nexport { $71cd76cc60e0454e$export$6f32135080cb4c3 as useControllableState };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}