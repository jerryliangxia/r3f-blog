{"ast":null,"code":"/**\n * A helper to generate CSS classes that include breakpoints.\n *\n * Examples:\n * ```\n * const marginTop = '1'\n * withBreakpoints(marginTop, 'mt') // returns 'mt-1'\n *\n * const padding = { initial: '1', xs: '2', md: '3' }\n * withBreakpoints(padding, 'p') // returns 'p-1 xs:p-1 md:p-3'\n *\n * const justifyContent = { initial: 'start', md: 'space-between' }\n * withBreakpoints(justifyContent, 'jc', { 'space-between': 'sb' }) // returns 'jc-start md:jc-sb'\n * ```\n */\nfunction withBreakpoints(value,\n// Value to check\nclassPrefix = '',\n// CSS class prefix, e.g. \"px\" in \"px-1\" class\nvalueMap // Optionally, an object to map prop values to a different CSS suffix\n) {\n  var _a, _b, _c, _d;\n  const classes = [];\n  if (typeof value === 'object') {\n    for (const bp of Object.keys(value)) {\n      if (bp in value) {\n        const str = (_a = value[bp]) === null || _a === void 0 ? void 0 : _a.toString();\n        const isNegative = str === null || str === void 0 ? void 0 : str.startsWith('-');\n        const delimiter = classPrefix === '' ? '' : '-';\n        const prefix = isNegative ? `-${classPrefix}` : classPrefix;\n        const matchedValue = isNegative ? str === null || str === void 0 ? void 0 : str.substring(1) : str;\n        if (matchedValue === undefined) {\n          continue;\n        }\n        const suffix = (_b = valueMap === null || valueMap === void 0 ? void 0 : valueMap[matchedValue]) !== null && _b !== void 0 ? _b : matchedValue;\n        const className = bp === 'initial' ? `${prefix}${delimiter}${suffix}` : `${bp}:${prefix}${delimiter}${suffix}`;\n        classes.push(className);\n      }\n    }\n  }\n  if (typeof value === 'string') {\n    const isNegative = value.startsWith('-');\n    const delimiter = classPrefix === '' ? '' : '-';\n    const prefix = isNegative ? `-${classPrefix}` : classPrefix;\n    const matchedValue = isNegative ? value.substring(1) : value;\n    const suffix = (_c = valueMap === null || valueMap === void 0 ? void 0 : valueMap[matchedValue]) !== null && _c !== void 0 ? _c : matchedValue;\n    classes.push(`${prefix}${delimiter}${suffix}`);\n  }\n  if (typeof value === 'boolean') {\n    const delimiter = classPrefix === '' ? '' : '-';\n    const matchedValue = value.toString();\n    const suffix = (_d = valueMap === null || valueMap === void 0 ? void 0 : valueMap[matchedValue]) !== null && _d !== void 0 ? _d : matchedValue;\n    classes.push(`${classPrefix}${delimiter}${suffix}`);\n  }\n  return classes.join(' ');\n}\nfunction isBreakpointsObject(obj) {\n  return typeof obj === 'object';\n}\nexport { withBreakpoints, isBreakpointsObject };\n//# sourceMappingURL=breakpoints.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}