{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\nimport { popoverContentPropDefs } from './popover.props';\nimport { withBreakpoints } from '../helpers';\nimport { Theme } from '../theme';\nconst PopoverRoot = props => React.createElement(PopoverPrimitive.Root, {\n  ...props\n});\nPopoverRoot.displayName = 'PopoverRoot';\nconst PopoverTrigger = React.forwardRef((props, forwardedRef) => React.createElement(PopoverPrimitive.Trigger, {\n  ...props,\n  ref: forwardedRef,\n  asChild: true\n}));\nPopoverTrigger.displayName = 'PopoverTrigger';\nconst PopoverContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    forceMount,\n    container,\n    size = popoverContentPropDefs.size.default,\n    ...contentProps\n  } = props;\n  return React.createElement(PopoverPrimitive.Portal, {\n    container: container,\n    forceMount: forceMount\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(PopoverPrimitive.Content, {\n    align: \"start\",\n    sideOffset: 8,\n    collisionPadding: 10,\n    ...contentProps,\n    ref: forwardedRef,\n    className: classNames('rt-PopperContent', 'rt-PopoverContent', className, withBreakpoints(size, 'rt-r-size'))\n  })));\n});\nPopoverContent.displayName = 'PopoverContent';\nconst PopoverClose = React.forwardRef((props, forwardedRef) => React.createElement(PopoverPrimitive.Close, {\n  ...props,\n  ref: forwardedRef,\n  asChild: true\n}));\nPopoverClose.displayName = 'PopoverClose';\nconst Popover = Object.assign({}, {\n  Root: PopoverRoot,\n  Content: PopoverContent,\n  Trigger: PopoverTrigger,\n  Close: PopoverClose\n});\nexport { Popover, PopoverRoot, PopoverContent, PopoverTrigger, PopoverClose };\n//# sourceMappingURL=popover.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}