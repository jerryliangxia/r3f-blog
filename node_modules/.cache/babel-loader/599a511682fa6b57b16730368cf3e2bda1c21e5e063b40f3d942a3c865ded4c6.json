{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Text } from './text';\nimport { calloutRootPropDefs } from './callout.props';\nimport { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';\nconst CalloutContext = React.createContext({});\nconst CalloutRoot = React.forwardRef((props, forwardedRef) => {\n  const {\n    rest: marginRest,\n    ...marginProps\n  } = extractMarginProps(props);\n  const {\n    children,\n    className,\n    size = calloutRootPropDefs.size.default,\n    variant = calloutRootPropDefs.variant.default,\n    color = calloutRootPropDefs.color.default,\n    highContrast = calloutRootPropDefs.highContrast.default,\n    ...rootProps\n  } = marginRest;\n  return React.createElement(\"div\", {\n    \"data-accent-color\": color,\n    ...rootProps,\n    className: classNames('rt-CalloutRoot', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, {\n      'rt-high-contrast': highContrast\n    }, withMarginProps(marginProps)),\n    ref: forwardedRef\n  }, React.createElement(CalloutContext.Provider, {\n    value: React.useMemo(() => ({\n      size,\n      color,\n      highContrast\n    }), [size, color, highContrast])\n  }, children));\n});\nCalloutRoot.displayName = 'CalloutRoot';\nconst CalloutIcon = React.forwardRef((props, forwardedRef) => {\n  const {\n    color,\n    size,\n    highContrast\n  } = React.useContext(CalloutContext);\n  return React.createElement(Text, {\n    asChild: true,\n    color: color,\n    size: getTextSize(size),\n    highContrast: highContrast\n  }, React.createElement(\"div\", {\n    ...props,\n    className: classNames('rt-CalloutIcon', props.className),\n    ref: forwardedRef\n  }));\n});\nCalloutIcon.displayName = 'CalloutIcon';\nconst CalloutText = React.forwardRef((props, forwardedRef) => {\n  const {\n    color,\n    size,\n    highContrast\n  } = React.useContext(CalloutContext);\n  return React.createElement(Text, {\n    as: \"p\",\n    size: getTextSize(size),\n    color: color,\n    highContrast: highContrast,\n    ...props,\n    ref: forwardedRef,\n    className: classNames('rt-CalloutText', props.className)\n  });\n});\nCalloutText.displayName = 'CalloutText';\nfunction getTextSize(size) {\n  if (size === undefined) return undefined;\n  if (typeof size === 'string') {\n    return getNonResponsiveTextSize(size);\n  }\n  return Object.fromEntries(Object.entries(size).map(([key, value]) => [key, getNonResponsiveTextSize(value)]));\n}\nfunction getNonResponsiveTextSize(size) {\n  return size === '3' ? '3' : '2';\n}\nconst Callout = Object.assign({}, {\n  Root: CalloutRoot,\n  Icon: CalloutIcon,\n  Text: CalloutText\n});\nexport { Callout, CalloutRoot, CalloutIcon, CalloutText };\n//# sourceMappingURL=callout.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}