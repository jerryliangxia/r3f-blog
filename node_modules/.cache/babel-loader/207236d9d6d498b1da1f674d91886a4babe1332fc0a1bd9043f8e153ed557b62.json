{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport { Slottable } from '@radix-ui/react-slot';\nimport { ScrollArea } from './scroll-area';\nimport { dropdownMenuContentPropDefs, dropdownMenuItemPropDefs } from './dropdown-menu.props';\nimport { withBreakpoints } from '../helpers';\nimport { Theme, useThemeContext } from '../theme';\nimport { ThickCheckIcon, ThickChevronRightIcon } from '../icons';\nconst DropdownMenuRoot = props => React.createElement(DropdownMenuPrimitive.Root, {\n  ...props\n});\nDropdownMenuRoot.displayName = 'DropdownMenuRoot';\nconst DropdownMenuTrigger = React.forwardRef((props, forwardedRef) => React.createElement(DropdownMenuPrimitive.Trigger, {\n  ...props,\n  ref: forwardedRef,\n  asChild: true\n}));\nDropdownMenuTrigger.displayName = 'DropdownMenuTrigger';\nconst DropdownMenuContentContext = React.createContext({});\nconst DropdownMenuContent = React.forwardRef((props, forwardedRef) => {\n  const themeContext = useThemeContext();\n  const {\n    className,\n    children,\n    size = dropdownMenuContentPropDefs.size.default,\n    variant = dropdownMenuContentPropDefs.variant.default,\n    highContrast = dropdownMenuContentPropDefs.highContrast.default,\n    color = dropdownMenuItemPropDefs.color.default,\n    container,\n    forceMount,\n    ...contentProps\n  } = props;\n  const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;\n  return React.createElement(DropdownMenuPrimitive.Portal, {\n    container: container,\n    forceMount: forceMount\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(DropdownMenuPrimitive.Content, {\n    \"data-accent-color\": resolvedColor,\n    align: \"start\",\n    sideOffset: 4,\n    collisionPadding: 10,\n    ...contentProps,\n    ref: forwardedRef,\n    className: classNames('rt-PopperContent', 'rt-BaseMenuContent', 'rt-DropdownMenuContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, {\n      'rt-high-contrast': highContrast\n    })\n  }, React.createElement(ScrollArea, {\n    type: \"auto\"\n  }, React.createElement(\"div\", {\n    className: classNames('rt-BaseMenuViewport', 'rt-DropdownMenuViewport')\n  }, React.createElement(DropdownMenuContentContext.Provider, {\n    value: React.useMemo(() => ({\n      size,\n      variant,\n      color: resolvedColor,\n      highContrast\n    }), [size, variant, resolvedColor, highContrast])\n  }, children))))));\n});\nDropdownMenuContent.displayName = 'DropdownMenuContent';\nconst DropdownMenuLabel = React.forwardRef((props, forwardedRef) => React.createElement(DropdownMenuPrimitive.Label, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuLabel', 'rt-DropdownMenuLabel', props.className)\n}));\nDropdownMenuLabel.displayName = 'DropdownMenuLabel';\nconst DropdownMenuItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    color = dropdownMenuItemPropDefs.color.default,\n    shortcut,\n    ...itemProps\n  } = props;\n  return React.createElement(DropdownMenuPrimitive.Item, {\n    \"data-accent-color\": color,\n    ...itemProps,\n    ref: forwardedRef,\n    className: classNames('rt-reset-a', 'rt-BaseMenuItem', 'rt-DropdownMenuItem', className)\n  }, React.createElement(Slottable, null, children), shortcut && React.createElement(\"div\", {\n    className: \"rt-BaseMenuShortcut rt-DropdownMenuShortcut\"\n  }, shortcut));\n});\nDropdownMenuItem.displayName = 'DropdownMenuItem';\nconst DropdownMenuGroup = React.forwardRef((props, forwardedRef) => React.createElement(DropdownMenuPrimitive.Group, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuGroup', 'rt-DropdownMenuGroup', props.className)\n}));\nDropdownMenuGroup.displayName = 'DropdownMenuGroup';\nconst DropdownMenuRadioGroup = React.forwardRef((props, forwardedRef) => React.createElement(DropdownMenuPrimitive.RadioGroup, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuRadioGroup', 'rt-DropdownMenuRadioGroup', props.className)\n}));\nDropdownMenuRadioGroup.displayName = 'DropdownMenuRadioGroup';\nconst DropdownMenuRadioItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    className,\n    ...itemProps\n  } = props;\n  return React.createElement(DropdownMenuPrimitive.RadioItem, {\n    ...itemProps,\n    ref: forwardedRef,\n    className: classNames('rt-BaseMenuItem', 'rt-BaseMenuRadioItem', 'rt-DropdownMenuItem', 'rt-DropdownMenuRadioItem', className)\n  }, React.createElement(Slottable, null, children), React.createElement(DropdownMenuPrimitive.ItemIndicator, {\n    className: \"rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator\"\n  }, React.createElement(ThickCheckIcon, null)));\n});\nDropdownMenuRadioItem.displayName = 'DropdownMenuRadioItem';\nconst DropdownMenuCheckboxItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    className,\n    shortcut,\n    ...itemProps\n  } = props;\n  return React.createElement(DropdownMenuPrimitive.CheckboxItem, {\n    ...itemProps,\n    ref: forwardedRef,\n    className: classNames('rt-BaseMenuItem', 'rt-BaseMenuCheckboxItem', 'rt-DropdownMenuItem', 'rt-DropdownMenuCheckboxItem', className)\n  }, React.createElement(Slottable, null, children), React.createElement(DropdownMenuPrimitive.ItemIndicator, {\n    className: \"rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator\"\n  }, React.createElement(ThickCheckIcon, null)), shortcut && React.createElement(\"div\", {\n    className: \"rt-BaseMenuShortcut rt-DropdownMenuShortcut\"\n  }, shortcut));\n});\nDropdownMenuCheckboxItem.displayName = 'DropdownMenuCheckboxItem';\nconst DropdownMenuSub = props => React.createElement(DropdownMenuPrimitive.Sub, {\n  ...props\n});\nDropdownMenuSub.displayName = 'DropdownMenuSub';\nconst DropdownMenuSubTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    ...subTriggerProps\n  } = props;\n  return React.createElement(DropdownMenuPrimitive.SubTrigger, {\n    ...subTriggerProps,\n    ref: forwardedRef,\n    className: classNames('rt-BaseMenuItem', 'rt-BaseMenuSubTrigger', 'rt-DropdownMenuItem', 'rt-DropdownMenuSubTrigger', className)\n  }, React.createElement(Slottable, null, children), React.createElement(\"div\", {\n    className: \"rt-BaseMenuShortcut rt-DropdownMenuShortcut\"\n  }, React.createElement(ThickChevronRightIcon, {\n    className: \"rt-BaseMenuSubTriggerIcon\"\n  })));\n});\nDropdownMenuSubTrigger.displayName = 'DropdownMenuSubTrigger';\nconst DropdownMenuSubContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    container,\n    forceMount,\n    ...subContentProps\n  } = props;\n  const {\n    size,\n    variant,\n    color,\n    highContrast\n  } = React.useContext(DropdownMenuContentContext);\n  return React.createElement(DropdownMenuPrimitive.Portal, {\n    container: container,\n    forceMount: forceMount\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(DropdownMenuPrimitive.SubContent, {\n    \"data-accent-color\": color,\n    alignOffset: -Number(size) * 4,\n    collisionPadding: 10,\n    ...subContentProps,\n    ref: forwardedRef,\n    className: classNames('rt-PopperContent', 'rt-BaseMenuContent', 'rt-BaseMenuSubContent', 'rt-DropdownMenuContent', 'rt-DropdownMenuSubContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, {\n      'rt-high-contrast': highContrast\n    })\n  }, React.createElement(ScrollArea, {\n    type: \"auto\"\n  }, React.createElement(\"div\", {\n    className: classNames('rt-BaseMenuViewport', 'rt-DropdownMenuViewport')\n  }, children)))));\n});\nDropdownMenuSubContent.displayName = 'DropdownMenuSubContent';\nconst DropdownMenuSeparator = React.forwardRef((props, forwardedRef) => React.createElement(DropdownMenuPrimitive.Separator, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuSeparator', 'rt-DropdownMenuSeparator', props.className)\n}));\nDropdownMenuSeparator.displayName = 'DropdownMenuSeparator';\nconst DropdownMenu = Object.assign({}, {\n  Root: DropdownMenuRoot,\n  Trigger: DropdownMenuTrigger,\n  Content: DropdownMenuContent,\n  Label: DropdownMenuLabel,\n  Item: DropdownMenuItem,\n  Group: DropdownMenuGroup,\n  RadioGroup: DropdownMenuRadioGroup,\n  RadioItem: DropdownMenuRadioItem,\n  CheckboxItem: DropdownMenuCheckboxItem,\n  Sub: DropdownMenuSub,\n  SubTrigger: DropdownMenuSubTrigger,\n  SubContent: DropdownMenuSubContent,\n  Separator: DropdownMenuSeparator\n});\nexport { DropdownMenu, DropdownMenuRoot, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuItem, DropdownMenuGroup, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuCheckboxItem, DropdownMenuSub, DropdownMenuSubTrigger, DropdownMenuSubContent, DropdownMenuSeparator };\n//# sourceMappingURL=dropdown-menu.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}