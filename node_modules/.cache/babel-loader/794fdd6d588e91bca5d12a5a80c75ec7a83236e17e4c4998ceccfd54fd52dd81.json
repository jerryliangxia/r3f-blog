{"ast":null,"code":"var _jsxFileName = \"/Users/jerryxia/Documents/PersonalProjects/Portfolio/r3f-blog/src/components/game/components/CharacterController.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { CapsuleCollider, RigidBody, vec3 } from \"@react-three/rapier\";\nimport SpiderManPS5 from \"./SpiderManPS5\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useKeyboardControls } from \"@react-three/drei\";\nimport { Controls } from \"../Game\";\nimport { useGameStore } from \"./Store\";\nimport Venom from \"./Venom\";\nimport Cube from \"./Cube\";\nimport * as THREE from \"three\";\n\n// const JUMP_FORCE = 0.5;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOVEMENT_SPEED = 0.1;\nconst MAX_VEL = 3;\nconst RUN_VEL = 1.5;\nconst CAMERA_DISTANCE = 4;\nfunction CharacterController() {\n  _s();\n  const {\n    characterState,\n    setCharacterState\n  } = useGameStore(state => ({\n    character: state.characterState,\n    setCharacterState: state.setCharacterState,\n    gameState: state.gameState\n  }));\n  const [isColliding, setIsColliding] = useState(false);\n  const [currentCharacter, setCurrentCharacter] = useState(\"SpiderManPS5\");\n  const spacePressed = useKeyboardControls(state => state[Controls.jump]);\n  useEffect(() => {\n    if (spacePressed) {\n      setCurrentCharacter(prev => {\n        if (prev === \"SpiderManPS5\") return \"Venom\";\n        if (prev === \"Venom\") return \"Cube\";\n        return \"SpiderManPS5\";\n      });\n    }\n  }, [spacePressed]);\n  useEffect(() => {\n    setCharacterState(\"Land\");\n    const timer = setTimeout(() => {\n      setCharacterState(\"Idle\");\n    }, 1000); // Replace 1000 with the duration of the \"Land\" animation in milliseconds\n\n    return () => clearTimeout(timer); // Clean up the timer when the component unmounts\n  }, []);\n\n  // const jumpPressed = useKeyboardControls((state) => state[Controls.jump]);\n  const leftPressed = useKeyboardControls(state => state[Controls.left]);\n  const rightPressed = useKeyboardControls(state => state[Controls.right]);\n  const backPressed = useKeyboardControls(state => state[Controls.back]);\n  const forwardPressed = useKeyboardControls(state => state[Controls.forward]);\n  const rigidBody = useRef();\n  const isOnFloor = useRef(false);\n  useFrame((state, delta) => {\n    const impulse = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    // if (jumpPressed && isOnFloor.current) {\n    //   impulse.y += JUMP_FORCE;\n    //   setCharacterState(\"Jump\"); // Trigger the \"Jump\" animation\n    //   setTimeout(() => {\n    //     isOnFloor.current = false; // Set isOnFloor to false after a delay\n    //   }, 1);\n    // }\n    // if (!jumpPressed && isOnFloor.current) {\n    //   setCharacterState(\"Idle\");\n    // }\n\n    const linvel = rigidBody.current.linvel();\n    let changeRotation = false;\n    if (rightPressed && linvel.x < MAX_VEL) {\n      impulse.x += MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n    if (leftPressed && linvel.x > -MAX_VEL) {\n      impulse.x -= MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n    if (backPressed && linvel.z < MAX_VEL) {\n      impulse.z += MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n    if (forwardPressed && linvel.z > -MAX_VEL) {\n      impulse.z -= MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n    rigidBody.current.applyImpulse(impulse, true);\n    if (Math.abs(linvel.x) > RUN_VEL || Math.abs(linvel.z) > RUN_VEL) {\n      if (characterState !== \"Run\") {\n        setCharacterState(\"Run\");\n      }\n    } else {\n      if (characterState !== \"Idle\") {\n        setCharacterState(\"Idle\");\n      }\n    }\n    if (changeRotation && !isColliding) {\n      const angle = Math.atan2(linvel.x, linvel.z);\n      character.current.rotation.y = angle;\n    }\n\n    // CAMERA FOLLOW\n    const characterWorldPosition = character.current.getWorldPosition(new THREE.Vector3());\n    const targetCameraPosition = new THREE.Vector3(characterWorldPosition.x, 0, characterWorldPosition.z + CAMERA_DISTANCE);\n\n    // Move the camera upon entering\n    targetCameraPosition.y = 1;\n    state.camera.position.lerp(targetCameraPosition, delta * 2);\n    state.camera.position.x = characterWorldPosition.x;\n    state.camera.position.z = characterWorldPosition.z + CAMERA_DISTANCE;\n    const targetLookAt = new THREE.Vector3(characterWorldPosition.x, 0, characterWorldPosition.z);\n    const direction = new THREE.Vector3();\n    state.camera.getWorldDirection(direction);\n    const position = new THREE.Vector3();\n    state.camera.getWorldPosition(position);\n    const currentLookAt = position.clone().add(direction);\n    const lerpedLookAt = new THREE.Vector3();\n    lerpedLookAt.lerpVectors(currentLookAt, targetLookAt, delta * 2);\n    state.camera.lookAt(lerpedLookAt);\n  });\n  const character = useRef();\n  const resetPosition = () => {\n    rigidBody.current.setTranslation(vec3({\n      x: 0,\n      y: 0,\n      z: 0\n    }));\n    rigidBody.current.setLinvel(vec3({\n      x: 0,\n      y: 0,\n      z: 0\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(RigidBody, {\n      ref: rigidBody,\n      colliders: false,\n      scale: [0.5, 0.5, 0.5],\n      enabledRotations: [false, false, false],\n      onCollisionEnter: ({\n        other\n      }) => {\n        if (other.rigidBodyObject.name !== \"ground\") {\n          setIsColliding(true);\n        }\n        isOnFloor.current = true;\n      },\n      onCollisionExit: () => {\n        setIsColliding(false);\n      },\n      onIntersectionEnter: ({\n        other\n      }) => {\n        if (other.rigidBodyObject.name === \"void\") {\n          resetPosition();\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(CapsuleCollider, {\n        args: [0.8, 0.4],\n        position: [0, 1.2, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n        ref: character,\n        children: [currentCharacter === \"SpiderManPS5\" && /*#__PURE__*/_jsxDEV(SpiderManPS5, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 51\n        }, this), currentCharacter === \"Venom\" && /*#__PURE__*/_jsxDEV(Venom, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 44\n        }, this), currentCharacter === \"Cube\" && /*#__PURE__*/_jsxDEV(Cube, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(CharacterController, \"PE23T5w+k3WzsV3e1RfGlYfpsS4=\", false, function () {\n  return [useGameStore, useKeyboardControls, useKeyboardControls, useKeyboardControls, useKeyboardControls, useKeyboardControls, useFrame];\n});\n_c = CharacterController;\nexport default CharacterController;\nvar _c;\n$RefreshReg$(_c, \"CharacterController\");","map":{"version":3,"names":["React","useRef","useEffect","useState","CapsuleCollider","RigidBody","vec3","SpiderManPS5","useFrame","useKeyboardControls","Controls","useGameStore","Venom","Cube","THREE","jsxDEV","_jsxDEV","MOVEMENT_SPEED","MAX_VEL","RUN_VEL","CAMERA_DISTANCE","CharacterController","_s","characterState","setCharacterState","state","character","gameState","isColliding","setIsColliding","currentCharacter","setCurrentCharacter","spacePressed","jump","prev","timer","setTimeout","clearTimeout","leftPressed","left","rightPressed","right","backPressed","back","forwardPressed","forward","rigidBody","isOnFloor","delta","impulse","x","y","z","linvel","current","changeRotation","applyImpulse","Math","abs","angle","atan2","rotation","characterWorldPosition","getWorldPosition","Vector3","targetCameraPosition","camera","position","lerp","targetLookAt","direction","getWorldDirection","currentLookAt","clone","add","lerpedLookAt","lerpVectors","lookAt","resetPosition","setTranslation","setLinvel","children","ref","colliders","scale","enabledRotations","onCollisionEnter","other","rigidBodyObject","name","onCollisionExit","onIntersectionEnter","args","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jerryxia/Documents/PersonalProjects/Portfolio/r3f-blog/src/components/game/components/CharacterController.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { CapsuleCollider, RigidBody, vec3 } from \"@react-three/rapier\";\nimport SpiderManPS5 from \"./SpiderManPS5\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useKeyboardControls } from \"@react-three/drei\";\nimport { Controls } from \"../Game\";\nimport { useGameStore } from \"./Store\";\nimport Venom from \"./Venom\";\nimport Cube from \"./Cube\";\n\nimport * as THREE from \"three\";\n\n// const JUMP_FORCE = 0.5;\nconst MOVEMENT_SPEED = 0.1;\nconst MAX_VEL = 3;\nconst RUN_VEL = 1.5;\nconst CAMERA_DISTANCE = 4;\n\nfunction CharacterController() {\n  const { characterState, setCharacterState } = useGameStore((state) => ({\n    character: state.characterState,\n    setCharacterState: state.setCharacterState,\n    gameState: state.gameState,\n  }));\n\n  const [isColliding, setIsColliding] = useState(false);\n  const [currentCharacter, setCurrentCharacter] = useState(\"SpiderManPS5\");\n  const spacePressed = useKeyboardControls((state) => state[Controls.jump]);\n\n  useEffect(() => {\n    if (spacePressed) {\n      setCurrentCharacter((prev) => {\n        if (prev === \"SpiderManPS5\") return \"Venom\";\n        if (prev === \"Venom\") return \"Cube\";\n        return \"SpiderManPS5\";\n      });\n    }\n  }, [spacePressed]);\n\n  useEffect(() => {\n    setCharacterState(\"Land\");\n    const timer = setTimeout(() => {\n      setCharacterState(\"Idle\");\n    }, 1000); // Replace 1000 with the duration of the \"Land\" animation in milliseconds\n\n    return () => clearTimeout(timer); // Clean up the timer when the component unmounts\n  }, []);\n\n  // const jumpPressed = useKeyboardControls((state) => state[Controls.jump]);\n  const leftPressed = useKeyboardControls((state) => state[Controls.left]);\n  const rightPressed = useKeyboardControls((state) => state[Controls.right]);\n  const backPressed = useKeyboardControls((state) => state[Controls.back]);\n  const forwardPressed = useKeyboardControls(\n    (state) => state[Controls.forward]\n  );\n\n  const rigidBody = useRef();\n  const isOnFloor = useRef(false);\n\n  useFrame((state, delta) => {\n    const impulse = { x: 0, y: 0, z: 0 };\n    // if (jumpPressed && isOnFloor.current) {\n    //   impulse.y += JUMP_FORCE;\n    //   setCharacterState(\"Jump\"); // Trigger the \"Jump\" animation\n    //   setTimeout(() => {\n    //     isOnFloor.current = false; // Set isOnFloor to false after a delay\n    //   }, 1);\n    // }\n    // if (!jumpPressed && isOnFloor.current) {\n    //   setCharacterState(\"Idle\");\n    // }\n\n    const linvel = rigidBody.current.linvel();\n    let changeRotation = false;\n    if (rightPressed && linvel.x < MAX_VEL) {\n      impulse.x += MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n    if (leftPressed && linvel.x > -MAX_VEL) {\n      impulse.x -= MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n    if (backPressed && linvel.z < MAX_VEL) {\n      impulse.z += MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n    if (forwardPressed && linvel.z > -MAX_VEL) {\n      impulse.z -= MOVEMENT_SPEED;\n      changeRotation = true;\n    }\n\n    rigidBody.current.applyImpulse(impulse, true);\n\n    if (Math.abs(linvel.x) > RUN_VEL || Math.abs(linvel.z) > RUN_VEL) {\n      if (characterState !== \"Run\") {\n        setCharacterState(\"Run\");\n      }\n    } else {\n      if (characterState !== \"Idle\") {\n        setCharacterState(\"Idle\");\n      }\n    }\n\n    if (changeRotation && !isColliding) {\n      const angle = Math.atan2(linvel.x, linvel.z);\n      character.current.rotation.y = angle;\n    }\n\n    // CAMERA FOLLOW\n    const characterWorldPosition = character.current.getWorldPosition(\n      new THREE.Vector3()\n    );\n\n    const targetCameraPosition = new THREE.Vector3(\n      characterWorldPosition.x,\n      0,\n      characterWorldPosition.z + CAMERA_DISTANCE\n    );\n\n    // Move the camera upon entering\n    targetCameraPosition.y = 1;\n    state.camera.position.lerp(targetCameraPosition, delta * 2);\n\n    state.camera.position.x = characterWorldPosition.x;\n    state.camera.position.z = characterWorldPosition.z + CAMERA_DISTANCE;\n\n    const targetLookAt = new THREE.Vector3(\n      characterWorldPosition.x,\n      0,\n      characterWorldPosition.z\n    );\n\n    const direction = new THREE.Vector3();\n    state.camera.getWorldDirection(direction);\n\n    const position = new THREE.Vector3();\n    state.camera.getWorldPosition(position);\n\n    const currentLookAt = position.clone().add(direction);\n    const lerpedLookAt = new THREE.Vector3();\n\n    lerpedLookAt.lerpVectors(currentLookAt, targetLookAt, delta * 2);\n\n    state.camera.lookAt(lerpedLookAt);\n  });\n\n  const character = useRef();\n\n  const resetPosition = () => {\n    rigidBody.current.setTranslation(vec3({ x: 0, y: 0, z: 0 }));\n    rigidBody.current.setLinvel(vec3({ x: 0, y: 0, z: 0 }));\n  };\n\n  return (\n    <group>\n      <RigidBody\n        ref={rigidBody}\n        colliders={false}\n        scale={[0.5, 0.5, 0.5]}\n        enabledRotations={[false, false, false]}\n        onCollisionEnter={({ other }) => {\n          if (other.rigidBodyObject.name !== \"ground\") {\n            setIsColliding(true);\n          }\n          isOnFloor.current = true;\n        }}\n        onCollisionExit={() => {\n          setIsColliding(false);\n        }}\n        onIntersectionEnter={({ other }) => {\n          if (other.rigidBodyObject.name === \"void\") {\n            resetPosition();\n          }\n        }}\n      >\n        <CapsuleCollider args={[0.8, 0.4]} position={[0, 1.2, 0]} />\n        <group ref={character}>\n          {currentCharacter === \"SpiderManPS5\" && <SpiderManPS5 />}\n          {currentCharacter === \"Venom\" && <Venom />}\n          {currentCharacter === \"Cube\" && <Cube />}\n        </group>\n      </RigidBody>\n    </group>\n  );\n}\n\nexport default CharacterController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}