{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as ContextMenuPrimitive from '@radix-ui/react-context-menu';\nimport { Slottable } from '@radix-ui/react-slot';\nimport { ScrollArea } from './scroll-area';\nimport { contextMenuContentPropDefs, contextMenuItemPropDefs } from './context-menu.props';\nimport { withBreakpoints } from '../helpers';\nimport { Theme, useThemeContext } from '../theme';\nimport { ThickCheckIcon, ThickChevronRightIcon } from '../icons';\nconst ContextMenuRoot = props => React.createElement(ContextMenuPrimitive.Root, {\n  ...props\n});\nContextMenuRoot.displayName = 'ContextMenuRoot';\nconst ContextMenuTrigger = React.forwardRef((props, forwardedRef) => React.createElement(ContextMenuPrimitive.Trigger, {\n  ...props,\n  ref: forwardedRef,\n  asChild: true\n}));\nContextMenuTrigger.displayName = 'ContextMenuTrigger';\nconst ContextMenuContentContext = React.createContext({});\nconst ContextMenuContent = React.forwardRef((props, forwardedRef) => {\n  const themeContext = useThemeContext();\n  const {\n    className,\n    children,\n    size = contextMenuContentPropDefs.size.default,\n    variant = contextMenuContentPropDefs.variant.default,\n    color = contextMenuContentPropDefs.color.default,\n    highContrast = contextMenuContentPropDefs.highContrast.default,\n    container,\n    forceMount,\n    ...contentProps\n  } = props;\n  const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;\n  return React.createElement(ContextMenuPrimitive.Portal, {\n    container: container,\n    forceMount: forceMount\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(ContextMenuPrimitive.Content, {\n    \"data-accent-color\": resolvedColor,\n    alignOffset: -Number(size) * 4,\n    collisionPadding: 10,\n    ...contentProps,\n    ref: forwardedRef,\n    className: classNames('rt-PopperContent', 'rt-BaseMenuContent', 'rt-ContextMenuContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, {\n      'rt-high-contrast': highContrast\n    })\n  }, React.createElement(ScrollArea, {\n    type: \"auto\"\n  }, React.createElement(\"div\", {\n    className: classNames('rt-BaseMenuViewport', 'rt-ContextMenuViewport')\n  }, React.createElement(ContextMenuContentContext.Provider, {\n    value: React.useMemo(() => ({\n      size,\n      variant,\n      color: resolvedColor,\n      highContrast\n    }), [size, variant, resolvedColor, highContrast])\n  }, children))))));\n});\nContextMenuContent.displayName = 'ContextMenuContent';\nconst ContextMenuLabel = React.forwardRef((props, forwardedRef) => React.createElement(ContextMenuPrimitive.Label, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuLabel', 'rt-ContextMenuLabel', props.className)\n}));\nContextMenuLabel.displayName = 'ContextMenuLabel';\nconst ContextMenuItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    color = contextMenuItemPropDefs.color.default,\n    shortcut,\n    ...itemProps\n  } = props;\n  return React.createElement(ContextMenuPrimitive.Item, {\n    \"data-accent-color\": color,\n    ...itemProps,\n    ref: forwardedRef,\n    className: classNames('rt-reset-a', 'rt-BaseMenuItem', 'rt-ContextMenuItem', className)\n  }, React.createElement(Slottable, null, children), shortcut && React.createElement(\"div\", {\n    className: \"rt-BaseMenuShortcut rt-ContextMenuShortcut\"\n  }, shortcut));\n});\nContextMenuItem.displayName = 'ContextMenuItem';\nconst ContextMenuGroup = React.forwardRef((props, forwardedRef) => React.createElement(ContextMenuPrimitive.Group, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuGroup', 'rt-ContextMenuGroup', props.className)\n}));\nContextMenuGroup.displayName = 'ContextMenuGroup';\nconst ContextMenuRadioGroup = React.forwardRef((props, forwardedRef) => React.createElement(ContextMenuPrimitive.RadioGroup, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuRadioGroup', 'rt-ContextMenuRadioGroup', props.className)\n}));\nContextMenuRadioGroup.displayName = 'ContextMenuRadioGroup';\nconst ContextMenuRadioItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    className,\n    ...itemProps\n  } = props;\n  return React.createElement(ContextMenuPrimitive.RadioItem, {\n    ...itemProps,\n    ref: forwardedRef,\n    className: classNames('rt-BaseMenuItem', 'rt-BaseMenuRadioItem', 'rt-ContextMenuItem', 'rt-ContextMenuRadioItem', className)\n  }, React.createElement(Slottable, null, children), React.createElement(ContextMenuPrimitive.ItemIndicator, {\n    className: \"rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator\"\n  }, React.createElement(ThickCheckIcon, null)));\n});\nContextMenuRadioItem.displayName = 'ContextMenuRadioItem';\nconst ContextMenuCheckboxItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    className,\n    shortcut,\n    ...itemProps\n  } = props;\n  return React.createElement(ContextMenuPrimitive.CheckboxItem, {\n    ...itemProps,\n    ref: forwardedRef,\n    className: classNames('rt-BaseMenuItem', 'rt-BaseMenuCheckboxItem', 'rt-ContextMenuItem', 'rt-ContextMenuCheckboxItem', className)\n  }, React.createElement(Slottable, null, children), React.createElement(ContextMenuPrimitive.ItemIndicator, {\n    className: \"rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator\"\n  }, React.createElement(ThickCheckIcon, null)), shortcut && React.createElement(\"div\", {\n    className: \"rt-BaseMenuShortcut rt-ContextMenuShortcut\"\n  }, shortcut));\n});\nContextMenuCheckboxItem.displayName = 'ContextMenuCheckboxItem';\nconst ContextMenuSub = props => React.createElement(ContextMenuPrimitive.Sub, {\n  ...props\n});\nContextMenuSub.displayName = 'ContextMenuSub';\nconst ContextMenuSubTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    ...subTriggerProps\n  } = props;\n  return React.createElement(ContextMenuPrimitive.SubTrigger, {\n    ...subTriggerProps,\n    ref: forwardedRef,\n    className: classNames('rt-BaseMenuItem', 'rt-BaseMenuSubTrigger', 'rt-ContextMenuItem', 'rt-ContextMenuSubTrigger', className)\n  }, React.createElement(Slottable, null, children), React.createElement(\"div\", {\n    className: \"rt-BaseMenuShortcut rt-ContextMenuShortcut\"\n  }, React.createElement(ThickChevronRightIcon, {\n    className: \"rt-BaseMenuSubTriggerIcon\"\n  })));\n});\nContextMenuSubTrigger.displayName = 'ContextMenuSubTrigger';\nconst ContextMenuSubContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    container,\n    forceMount,\n    ...subContentProps\n  } = props;\n  const {\n    size,\n    variant,\n    color,\n    highContrast\n  } = React.useContext(ContextMenuContentContext);\n  return React.createElement(ContextMenuPrimitive.Portal, {\n    container: container,\n    forceMount: forceMount\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(ContextMenuPrimitive.SubContent, {\n    \"data-accent-color\": color,\n    alignOffset: -Number(size) * 4,\n    collisionPadding: 10,\n    ...subContentProps,\n    ref: forwardedRef,\n    className: classNames('rt-PopperContent', 'rt-BaseMenuContent', 'rt-BaseMenuSubContent', 'rt-ContextMenuContent', 'rt-ContextMenuSubContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, {\n      'rt-high-contrast': highContrast\n    })\n  }, React.createElement(ScrollArea, {\n    type: \"auto\"\n  }, React.createElement(\"div\", {\n    className: classNames('rt-BaseMenuViewport', 'rt-ContextMenuViewport')\n  }, children)))));\n});\nContextMenuSubContent.displayName = 'ContextMenuSubContent';\nconst ContextMenuSeparator = React.forwardRef((props, forwardedRef) => React.createElement(ContextMenuPrimitive.Separator, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-BaseMenuSeparator', 'rt-ContextMenuSeparator', props.className)\n}));\nContextMenuSeparator.displayName = 'ContextMenuSeparator';\nconst ContextMenu = Object.assign({}, {\n  Root: ContextMenuRoot,\n  Trigger: ContextMenuTrigger,\n  Content: ContextMenuContent,\n  Label: ContextMenuLabel,\n  Item: ContextMenuItem,\n  Group: ContextMenuGroup,\n  RadioGroup: ContextMenuRadioGroup,\n  RadioItem: ContextMenuRadioItem,\n  CheckboxItem: ContextMenuCheckboxItem,\n  Sub: ContextMenuSub,\n  SubTrigger: ContextMenuSubTrigger,\n  SubContent: ContextMenuSubContent,\n  Separator: ContextMenuSeparator\n});\nexport { ContextMenu, ContextMenuRoot, ContextMenuTrigger, ContextMenuContent, ContextMenuLabel, ContextMenuItem, ContextMenuGroup, ContextMenuRadioGroup, ContextMenuRadioItem, ContextMenuCheckboxItem, ContextMenuSub, ContextMenuSubTrigger, ContextMenuSubContent, ContextMenuSeparator };\n//# sourceMappingURL=context-menu.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}