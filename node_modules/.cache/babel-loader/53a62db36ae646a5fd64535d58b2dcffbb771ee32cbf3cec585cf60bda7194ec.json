{"ast":null,"code":"import { createContext as $3bkAK$createContext, useMemo as $3bkAK$useMemo, createElement as $3bkAK$createElement, useContext as $3bkAK$useContext } from \"react\";\nfunction $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n  const Context = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n  function Provider(props) {\n    const {\n      children: children,\n      ...context\n    } = props; // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = $3bkAK$useMemo(() => context, Object.values(context));\n    return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n      value: value\n    }, children);\n  }\n  function useContext(consumerName) {\n    const context = $3bkAK$useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {\n  let defaultContexts = [];\n  /* -----------------------------------------------------------------------------------------------\n  * createContext\n  * ---------------------------------------------------------------------------------------------*/\n  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n    const BaseContext = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n    function Provider(props) {\n      const {\n        scope: scope,\n        children: children,\n        ...context\n      } = props;\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = $3bkAK$useMemo(() => context, Object.values(context));\n      return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n        value: value\n      }, children);\n    }\n    function useContext(consumerName, scope) {\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;\n      const context = $3bkAK$useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext];\n  }\n  /* -----------------------------------------------------------------------------------------------\n  * createScope\n  * ---------------------------------------------------------------------------------------------*/\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return $3bkAK$useMemo(() => ({\n        [`__scope${scopeName}`]: {\n          ...scope,\n          [scopeName]: contexts\n        }\n      }), [scope, contexts]);\n    };\n  };\n  createScope.scopeName = scopeName;\n  return [$c512c27ab02ef895$export$fd42f52fd3ae1109, $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)];\n}\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$var$composeContextScopes(...scopes) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n  const createScope1 = () => {\n    const scopeHooks = scopes.map(createScope => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes1 = scopeHooks.reduce((nextScopes, {\n        useScope: useScope,\n        scopeName: scopeName\n      }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return {\n          ...nextScopes,\n          ...currentScope\n        };\n      }, {});\n      return $3bkAK$useMemo(() => ({\n        [`__scope${baseScope.scopeName}`]: nextScopes1\n      }), [nextScopes1]);\n    };\n  };\n  createScope1.scopeName = baseScope.scopeName;\n  return createScope1;\n}\nexport { $c512c27ab02ef895$export$fd42f52fd3ae1109 as createContext, $c512c27ab02ef895$export$50c7b4e9d9f19c1 as createContextScope };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}