{"ast":null,"code":"/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { association } from 'mdast-util-to-markdown/lib/util/association.js';\nimport { containerFlow } from 'mdast-util-to-markdown/lib/util/container-flow.js';\nimport { indentLines } from 'mdast-util-to-markdown/lib/util/indent-lines.js';\nimport { safe } from 'mdast-util-to-markdown/lib/util/safe.js';\nimport { track } from 'mdast-util-to-markdown/lib/util/track.js';\nfootnoteReference.peek = footnoteReferencePeek;\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  };\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['phrasing', 'label', 'reference']\n    }],\n    handlers: {\n      footnoteDefinition,\n      footnoteReference\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter({\n    type: 'footnoteDefinition',\n    identifier: '',\n    label: '',\n    children: []\n  }, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume();\n  const node = /** @type {FootnoteDefinition} */\n  this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({\n    type: 'footnoteReference',\n    identifier: '',\n    label: ''\n  }, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume();\n  const node = /** @type {FootnoteDefinition} */\n  this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteReference');\n  const subexit = context.enter('reference');\n  value += tracker.move(safe(context, association(node), {\n    ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  exit();\n  value += tracker.move(']');\n  return value;\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '[';\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteDefinition');\n  const subexit = context.enter('label');\n  value += tracker.move(safe(context, association(node), {\n    ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  value += tracker.move(']:' + (node.children && node.children.length > 0 ? ' ' : ''));\n  tracker.shift(4);\n  value += tracker.move(indentLines(containerFlow(node, context, tracker.current()), map));\n  exit();\n  return value;\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line;\n  }\n  return (blank ? '' : '    ') + line;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}