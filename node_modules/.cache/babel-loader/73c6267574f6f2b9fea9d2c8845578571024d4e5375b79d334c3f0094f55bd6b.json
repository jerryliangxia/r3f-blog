{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport { selectRootPropDefs, selectTriggerPropDefs, selectContentPropDefs } from './select.props';\nimport { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';\nimport { Theme, useThemeContext } from '../theme';\nimport { ThickCheckIcon, ChevronDownIcon } from '../icons';\nconst SelectContext = React.createContext({});\nconst SelectRoot = props => {\n  const {\n    children,\n    size = selectRootPropDefs.size.default,\n    ...rootProps\n  } = props;\n  return React.createElement(SelectPrimitive.Root, {\n    ...rootProps\n  }, React.createElement(SelectContext.Provider, {\n    value: React.useMemo(() => ({\n      size\n    }), [size])\n  }, children));\n};\nSelectRoot.displayName = 'SelectRoot';\nconst SelectTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    rest: marginRest,\n    ...marginProps\n  } = extractMarginProps(props);\n  const {\n    className,\n    variant = selectTriggerPropDefs.variant.default,\n    color = selectTriggerPropDefs.color.default,\n    radius = selectTriggerPropDefs.radius.default,\n    placeholder,\n    ...triggerProps\n  } = marginRest;\n  const {\n    size\n  } = React.useContext(SelectContext);\n  return React.createElement(SelectPrimitive.Trigger, {\n    asChild: true\n  }, React.createElement(\"button\", {\n    \"data-accent-color\": color,\n    \"data-radius\": radius,\n    ...triggerProps,\n    ref: forwardedRef,\n    className: classNames('rt-reset-button', 'rt-SelectTrigger', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, withMarginProps(marginProps))\n  }, React.createElement(\"span\", {\n    style: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }\n  }, React.createElement(SelectPrimitive.Value, {\n    placeholder: placeholder\n  })), React.createElement(SelectPrimitive.Icon, {\n    asChild: true\n  }, React.createElement(ChevronDownIcon, {\n    className: \"rt-SelectIcon\"\n  }))));\n});\nSelectTrigger.displayName = 'SelectTrigger';\nconst SelectContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    variant = selectContentPropDefs.variant.default,\n    highContrast = selectContentPropDefs.highContrast.default,\n    color = selectContentPropDefs.color.default,\n    container,\n    ...contentProps\n  } = props;\n  const {\n    size\n  } = React.useContext(SelectContext);\n  const themeContext = useThemeContext();\n  const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;\n  return React.createElement(SelectPrimitive.Portal, {\n    container: container\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(SelectPrimitive.Content, {\n    \"data-accent-color\": resolvedColor,\n    sideOffset: 4,\n    align: \"center\",\n    ...contentProps,\n    ref: forwardedRef,\n    className: classNames({\n      'rt-PopperContent': contentProps.position === 'popper'\n    }, 'rt-SelectContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, {\n      'rt-high-contrast': highContrast\n    })\n  }, React.createElement(ScrollAreaPrimitive.Root, {\n    type: \"auto\",\n    className: \"rt-ScrollAreaRoot\"\n  }, React.createElement(SelectPrimitive.Viewport, {\n    asChild: true,\n    className: \"rt-SelectViewport\"\n  }, React.createElement(ScrollAreaPrimitive.Viewport, {\n    className: \"rt-ScrollAreaViewport\",\n    style: {\n      overflowY: undefined\n    }\n  }, children)), React.createElement(ScrollAreaPrimitive.Scrollbar, {\n    className: \"rt-ScrollAreaScrollbar size-1\",\n    orientation: \"vertical\"\n  }, React.createElement(ScrollAreaPrimitive.Thumb, {\n    className: \"rt-ScrollAreaThumb\"\n  }))))));\n});\nSelectContent.displayName = 'SelectContent';\nconst SelectItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    children,\n    ...itemProps\n  } = props;\n  return React.createElement(SelectPrimitive.Item, {\n    ...itemProps,\n    ref: forwardedRef,\n    className: classNames('rt-SelectItem', className)\n  }, React.createElement(SelectPrimitive.ItemIndicator, {\n    className: \"rt-SelectItemIndicator\"\n  }, React.createElement(ThickCheckIcon, null)), React.createElement(SelectPrimitive.ItemText, null, children));\n});\nSelectItem.displayName = 'SelectItem';\nconst SelectGroup = React.forwardRef((props, forwardedRef) => React.createElement(SelectPrimitive.Group, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-SelectGroup', props.className)\n}));\nSelectGroup.displayName = 'SelectGroup';\nconst SelectLabel = React.forwardRef((props, forwardedRef) => React.createElement(SelectPrimitive.Label, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-SelectLabel', props.className)\n}));\nSelectLabel.displayName = 'SelectLabel';\nconst SelectSeparator = React.forwardRef((props, forwardedRef) => React.createElement(SelectPrimitive.Separator, {\n  ...props,\n  ref: forwardedRef,\n  className: classNames('rt-SelectSeparator', props.className)\n}));\nSelectSeparator.displayName = 'SelectSeparator';\nconst Select = Object.assign({}, {\n  Root: SelectRoot,\n  Trigger: SelectTrigger,\n  Content: SelectContent,\n  Item: SelectItem,\n  Group: SelectGroup,\n  Label: SelectLabel,\n  Separator: SelectSeparator\n});\nexport { Select, SelectRoot, SelectTrigger, SelectContent, SelectItem, SelectGroup, SelectLabel, SelectSeparator };\n//# sourceMappingURL=select.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}