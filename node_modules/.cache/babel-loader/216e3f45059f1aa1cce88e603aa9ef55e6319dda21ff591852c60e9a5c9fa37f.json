{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { textFieldPropDefs, textFieldSlotPropDefs } from './text-field.props';\nimport { extractMarginProps, withMarginProps, extractPaddingProps, withPaddingProps, withBreakpoints } from '../helpers';\nconst TextFieldContext = React.createContext(undefined);\nconst TextFieldRoot = React.forwardRef((props, forwardedRef) => {\n  const {\n    rest: marginRest,\n    ...marginProps\n  } = extractMarginProps(props);\n  const {\n    children,\n    className,\n    size = textFieldPropDefs.size.default,\n    variant = textFieldPropDefs.variant.default,\n    color = textFieldPropDefs.color.default,\n    radius = textFieldPropDefs.radius.default,\n    ...rootProps\n  } = marginRest;\n  return React.createElement(\"div\", {\n    \"data-radius\": radius,\n    ...rootProps,\n    ref: forwardedRef,\n    className: classNames('rt-TextFieldRoot', className, withMarginProps(marginProps)),\n    onPointerDown: composeEventHandlers(rootProps.onPointerDown, event => {\n      const target = event.target;\n      if (target.closest('input, button, a')) return;\n      const input = event.currentTarget.querySelector('.rt-TextFieldInput');\n      if (!input) return;\n      const position = input.compareDocumentPosition(target);\n      const targetIsBeforeInput = (position & Node.DOCUMENT_POSITION_PRECEDING) !== 0;\n      const cursorPosition = targetIsBeforeInput ? 0 : input.value.length;\n      requestAnimationFrame(() => {\n        input.setSelectionRange(cursorPosition, cursorPosition);\n        input.focus();\n      });\n    })\n  }, React.createElement(TextFieldContext.Provider, {\n    value: {\n      size,\n      variant,\n      color,\n      radius\n    }\n  }, children));\n});\nTextFieldRoot.displayName = 'TextFieldRoot';\nconst TextFieldSlot = React.forwardRef((props, forwardedRef) => {\n  const {\n    rest: paddingRest,\n    ...paddingProps\n  } = extractPaddingProps(props);\n  const {\n    className,\n    color = textFieldSlotPropDefs.color.default,\n    gap = textFieldSlotPropDefs.gap.default,\n    ...slotProps\n  } = paddingRest;\n  const context = React.useContext(TextFieldContext);\n  return React.createElement(\"div\", {\n    \"data-accent-color\": color,\n    ...slotProps,\n    ref: forwardedRef,\n    className: classNames('rt-TextFieldSlot', className, withBreakpoints(context === null || context === void 0 ? void 0 : context.size, 'rt-r-size'), withBreakpoints(gap, 'rt-r-gap'), withPaddingProps(paddingProps))\n  });\n});\nTextFieldSlot.displayName = 'TextFieldSlot';\nconst TextFieldInput = React.forwardRef((props, forwardedRef) => {\n  var _a, _b, _c, _d;\n  const {\n    rest: marginRest,\n    ...marginProps\n  } = extractMarginProps(props);\n  const context = React.useContext(TextFieldContext);\n  const hasRoot = context !== undefined;\n  const {\n    className,\n    size = (_a = context === null || context === void 0 ? void 0 : context.size) !== null && _a !== void 0 ? _a : textFieldPropDefs.size.default,\n    variant = (_b = context === null || context === void 0 ? void 0 : context.variant) !== null && _b !== void 0 ? _b : textFieldPropDefs.variant.default,\n    color = (_c = context === null || context === void 0 ? void 0 : context.color) !== null && _c !== void 0 ? _c : textFieldPropDefs.color.default,\n    radius = (_d = context === null || context === void 0 ? void 0 : context.radius) !== null && _d !== void 0 ? _d : textFieldPropDefs.radius.default,\n    ...inputProps\n  } = marginRest;\n  const input = React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    \"data-accent-color\": color,\n    spellCheck: \"false\",\n    ...inputProps,\n    ref: forwardedRef,\n    className: classNames('rt-TextFieldInput', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`)\n  }), React.createElement(\"div\", {\n    \"data-accent-color\": color,\n    \"data-radius\": (context === null || context === void 0 ? void 0 : context.radius) ? undefined : radius,\n    className: \"rt-TextFieldChrome\"\n  }));\n  return hasRoot ? input : React.createElement(TextFieldRoot, {\n    ...marginProps,\n    size: size,\n    variant: variant,\n    color: color,\n    radius: radius\n  }, input);\n});\nTextFieldInput.displayName = 'TextFieldInput';\nconst TextField = Object.assign({}, {\n  Root: TextFieldRoot,\n  Slot: TextFieldSlot,\n  Input: TextFieldInput\n});\nexport { TextField, TextFieldRoot, TextFieldSlot, TextFieldInput };\n//# sourceMappingURL=text-field.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}