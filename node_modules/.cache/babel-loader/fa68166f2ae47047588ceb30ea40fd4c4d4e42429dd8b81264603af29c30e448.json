{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { Text } from './text';\nimport { Theme } from '../theme';\nconst Tooltip = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    className,\n    open,\n    defaultOpen,\n    onOpenChange,\n    delayDuration,\n    disableHoverableContent,\n    content,\n    multiline,\n    container,\n    forceMount,\n    ...tooltipContentProps\n  } = props;\n  const rootProps = {\n    open,\n    defaultOpen,\n    onOpenChange,\n    delayDuration,\n    disableHoverableContent\n  };\n  return React.createElement(TooltipPrimitive.Root, {\n    ...rootProps\n  }, React.createElement(TooltipPrimitive.Trigger, {\n    asChild: true\n  }, children), React.createElement(TooltipPrimitive.Portal, {\n    container: container,\n    forceMount: forceMount\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(TooltipPrimitive.Content, {\n    sideOffset: 4,\n    collisionPadding: 10,\n    ...tooltipContentProps,\n    ref: forwardedRef,\n    className: classNames('rt-TooltipContent', className, {\n      'rt-multiline': multiline\n    })\n  }, React.createElement(Text, {\n    as: \"p\",\n    className: \"rt-TooltipText\",\n    size: \"1\"\n  }, content), React.createElement(TooltipPrimitive.Arrow, {\n    className: \"rt-TooltipArrow\"\n  })))));\n});\nTooltip.displayName = 'Tooltip';\nexport { Tooltip };\n//# sourceMappingURL=tooltip.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}