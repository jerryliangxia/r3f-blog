{"ast":null,"code":"import { useState as $9gyGR$useState } from \"react\";\nimport { useLayoutEffect as $9gyGR$useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nfunction $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {\n  const [size, setSize] = $9gyGR$useState(undefined);\n  $9gyGR$useLayoutEffect(() => {\n    if (element) {\n      // provide size as early as possible\n      setSize({\n        width: element.offsetWidth,\n        height: element.offsetHeight\n      });\n      const resizeObserver = new ResizeObserver(entries => {\n        if (!Array.isArray(entries)) return;\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) return;\n        const entry = entries[0];\n        let width;\n        let height;\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize']; // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate it ourselves to get the correct border box.\n          width = element.offsetWidth;\n          height = element.offsetHeight;\n        }\n        setSize({\n          width: width,\n          height: height\n        });\n      });\n      resizeObserver.observe(element, {\n        box: 'border-box'\n      });\n      return () => resizeObserver.unobserve(element);\n    } else\n      // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n  }, [element]);\n  return size;\n}\nexport { $db6c3485150b8e66$export$1ab7ae714698c4b8 as useSize };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}