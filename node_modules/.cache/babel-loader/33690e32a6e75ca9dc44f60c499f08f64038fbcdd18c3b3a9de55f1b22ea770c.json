{"ast":null,"code":"import posthogJs from 'posthog-js';\nimport React, { createContext, useMemo, useContext, useState, useEffect, useRef, useCallback } from 'react';\nvar PostHogContext = createContext({\n  client: posthogJs\n});\nfunction PostHogProvider(_a) {\n  var children = _a.children,\n    client = _a.client,\n    apiKey = _a.apiKey,\n    options = _a.options;\n  var posthog = useMemo(function () {\n    if (client && apiKey) {\n      console.warn('You have provided both a client and an apiKey to PostHogProvider. The apiKey will be ignored in favour of the client.');\n    }\n    if (client && options) {\n      console.warn('You have provided both a client and options to PostHogProvider. The options will be ignored in favour of the client.');\n    }\n    if (client) {\n      return client;\n    }\n    if (apiKey) {\n      if (posthogJs.__loaded) {\n        console.warn('posthog was already loaded elsewhere. This may cause issues.');\n      }\n      posthogJs.init(apiKey, options);\n    }\n    return posthogJs;\n  }, [client, apiKey]);\n  return React.createElement(PostHogContext.Provider, {\n    value: {\n      client: posthog\n    }\n  }, children);\n}\nvar usePostHog = function () {\n  var client = useContext(PostHogContext).client;\n  return client;\n};\nfunction useFeatureFlagEnabled(flag) {\n  var client = usePostHog();\n  var _a = useState(),\n    featureEnabled = _a[0],\n    setFeatureEnabled = _a[1];\n  useEffect(function () {\n    return client.onFeatureFlags(function () {\n      setFeatureEnabled(client.isFeatureEnabled(flag));\n    });\n  }, [client, flag]);\n  return featureEnabled;\n}\nfunction useFeatureFlagPayload(flag) {\n  var client = usePostHog();\n  var _a = useState(),\n    featureFlagPayload = _a[0],\n    setFeatureFlagPayload = _a[1];\n  useEffect(function () {\n    return client.onFeatureFlags(function () {\n      setFeatureFlagPayload(client.getFeatureFlagPayload(flag));\n    });\n  }, [client, flag]);\n  return featureFlagPayload;\n}\nfunction useActiveFeatureFlags() {\n  var client = usePostHog();\n  var _a = useState(),\n    featureFlags = _a[0],\n    setFeatureFlags = _a[1];\n  useEffect(function () {\n    return client.onFeatureFlags(function (flags) {\n      setFeatureFlags(flags);\n    });\n  }, [client]);\n  return featureFlags;\n}\nfunction useFeatureFlagVariantKey(flag) {\n  var client = usePostHog();\n  var _a = useState(),\n    featureFlagVariantKey = _a[0],\n    setFeatureFlagVariantKey = _a[1];\n  useEffect(function () {\n    return client.onFeatureFlags(function () {\n      setFeatureFlagVariantKey(client.getFeatureFlag(flag));\n    });\n  }, [client, flag]);\n  return featureFlagVariantKey;\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction PostHogFeature(_a) {\n  var flag = _a.flag,\n    match = _a.match,\n    children = _a.children,\n    fallback = _a.fallback,\n    visibilityObserverOptions = _a.visibilityObserverOptions,\n    trackInteraction = _a.trackInteraction,\n    trackView = _a.trackView,\n    props = __rest(_a, [\"flag\", \"match\", \"children\", \"fallback\", \"visibilityObserverOptions\", \"trackInteraction\", \"trackView\"]);\n  var payload = useFeatureFlagPayload(flag);\n  var variant = useFeatureFlagVariantKey(flag);\n  var shouldTrackInteraction = trackInteraction !== null && trackInteraction !== void 0 ? trackInteraction : true;\n  var shouldTrackView = trackView !== null && trackView !== void 0 ? trackView : true;\n  if (match === undefined || variant === match) {\n    var childNode = typeof children === 'function' ? children(payload) : children;\n    return React.createElement(VisibilityAndClickTracker, __assign({\n      flag: flag,\n      options: visibilityObserverOptions,\n      trackInteraction: shouldTrackInteraction,\n      trackView: shouldTrackView\n    }, props), childNode);\n  }\n  return React.createElement(React.Fragment, null, fallback);\n}\nfunction captureFeatureInteraction(flag, posthog) {\n  var _a;\n  posthog.capture('$feature_interaction', {\n    feature_flag: flag,\n    $set: (_a = {}, _a[\"$feature_interaction/\" + flag] = true, _a)\n  });\n}\nfunction captureFeatureView(flag, posthog) {\n  posthog.capture('$feature_view', {\n    feature_flag: flag\n  });\n}\nfunction VisibilityAndClickTracker(_a) {\n  var flag = _a.flag,\n    children = _a.children,\n    trackInteraction = _a.trackInteraction,\n    trackView = _a.trackView,\n    options = _a.options,\n    props = __rest(_a, [\"flag\", \"children\", \"trackInteraction\", \"trackView\", \"options\"]);\n  var ref = useRef(null);\n  var posthog = usePostHog();\n  var visibilityTrackedRef = useRef(false);\n  var clickTrackedRef = useRef(false);\n  var cachedOnClick = useCallback(function () {\n    if (!clickTrackedRef.current && trackInteraction) {\n      captureFeatureInteraction(flag, posthog);\n      clickTrackedRef.current = true;\n    }\n  }, [flag, posthog, trackInteraction]);\n  useEffect(function () {\n    if (ref.current === null || !trackView) return;\n    var onIntersect = function (entry) {\n      if (!visibilityTrackedRef.current && entry.isIntersecting) {\n        captureFeatureView(flag, posthog);\n        visibilityTrackedRef.current = true;\n      }\n    };\n    var observer = new IntersectionObserver(function (_a) {\n      var entry = _a[0];\n      return onIntersect(entry);\n    }, __assign({\n      threshold: 0.1\n    }, options));\n    observer.observe(ref.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [flag, options, posthog, ref, trackView]);\n  return React.createElement(\"div\", __assign({\n    ref: ref\n  }, props, {\n    onClick: cachedOnClick\n  }), children);\n}\nexport { PostHogContext, PostHogFeature, PostHogProvider, useActiveFeatureFlags, useFeatureFlagEnabled, useFeatureFlagPayload, useFeatureFlagVariantKey, usePostHog };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}