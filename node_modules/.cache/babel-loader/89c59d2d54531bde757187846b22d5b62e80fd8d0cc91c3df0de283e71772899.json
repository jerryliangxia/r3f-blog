{"ast":null,"code":"import * as React from 'react';\nimport classNames from 'classnames';\nimport { Slot } from './slot';\nimport { gridPropDefs } from './grid.props';\nimport { extractMarginProps, withMarginProps, extractLayoutProps, withLayoutProps, withBreakpoints, isBreakpointsObject, hasOwnProperty } from '../helpers';\nconst Grid = React.forwardRef((props, forwardedRef) => {\n  const {\n    rest: marginRest,\n    ...marginProps\n  } = extractMarginProps(props);\n  const {\n    rest: layoutRest,\n    ...layoutProps\n  } = extractLayoutProps(marginRest);\n  const {\n    className,\n    asChild,\n    display = gridPropDefs.display.default,\n    columns = gridPropDefs.columns.default,\n    rows = gridPropDefs.rows.default,\n    flow = gridPropDefs.flow.default,\n    align = gridPropDefs.align.default,\n    justify = gridPropDefs.justify.default,\n    gap = gridPropDefs.gap.default,\n    gapX = gridPropDefs.gapX.default,\n    gapY = gridPropDefs.gapY.default,\n    style: propStyle,\n    ...gridProps\n  } = layoutRest;\n  const Comp = asChild ? Slot : 'div';\n  let style = {\n    ...propStyle\n  };\n  if (typeof columns === 'string') {\n    style = {\n      '--grid-template-columns': parseGridValue(columns),\n      ...style\n    };\n  }\n  if (typeof rows === 'string') {\n    style = {\n      '--grid-template-rows': parseGridValue(rows),\n      ...style\n    };\n  }\n  if (isBreakpointsObject(columns)) {\n    for (const breakpoint in columns) {\n      if (hasOwnProperty(columns, breakpoint)) {\n        const customProperty = `--grid-template-columns-${breakpoint}`;\n        style = {\n          [customProperty]: parseGridValue(columns[breakpoint]),\n          ...style\n        };\n      }\n    }\n  }\n  if (isBreakpointsObject(rows)) {\n    for (const breakpoint in rows) {\n      if (hasOwnProperty(rows, breakpoint)) {\n        const customProperty = `--grid-template-rows-${breakpoint}`;\n        style = {\n          [customProperty]: parseGridValue(rows[breakpoint]),\n          ...style\n        };\n      }\n    }\n  }\n  return React.createElement(Comp, {\n    ...gridProps,\n    ref: forwardedRef,\n    className: classNames('rt-Grid', className, withBreakpoints(display, 'rt-r-display'), withBreakpoints(flow, 'rt-r-gaf'), withBreakpoints(align, 'rt-r-ai'), withBreakpoints(justify, 'rt-r-jc', {\n      between: 'space-between'\n    }), withBreakpoints(gap, 'rt-r-gap'), withBreakpoints(gapX, 'rt-r-cg'), withBreakpoints(gapY, 'rt-r-rg'), withLayoutProps(layoutProps), withMarginProps(marginProps)),\n    style: Object.keys(style).length ? style : undefined\n  });\n});\nGrid.displayName = 'Grid';\nfunction parseGridValue(value) {\n  return (value === null || value === void 0 ? void 0 : value.match(/^\\d+$/)) ? `repeat(${value}, minmax(0, 1fr))` : value;\n}\nexport { Grid };\n//# sourceMappingURL=grid.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}