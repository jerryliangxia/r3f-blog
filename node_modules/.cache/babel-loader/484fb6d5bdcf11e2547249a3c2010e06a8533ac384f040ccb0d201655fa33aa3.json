{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { dialogContentPropDefs } from './dialog.props';\nimport { withBreakpoints } from '../helpers';\nimport { Heading } from './heading';\nimport { Text } from './text';\nimport { Theme } from '../theme';\nconst DialogRoot = props => React.createElement(DialogPrimitive.Root, {\n  ...props,\n  modal: true\n});\nDialogRoot.displayName = 'DialogRoot';\nconst DialogTrigger = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Trigger, {\n  ...props,\n  ref: forwardedRef,\n  asChild: true\n}));\nDialogTrigger.displayName = 'DialogTrigger';\nconst DialogContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    className,\n    forceMount,\n    container,\n    size = dialogContentPropDefs.size.default,\n    ...contentProps\n  } = props;\n  return React.createElement(DialogPrimitive.Portal, {\n    container: container,\n    forceMount: forceMount\n  }, React.createElement(Theme, {\n    asChild: true\n  }, React.createElement(DialogPrimitive.Overlay, {\n    className: \"rt-DialogOverlay\"\n  }, React.createElement(DialogPrimitive.Content, {\n    ...contentProps,\n    ref: forwardedRef,\n    className: classNames('rt-DialogContent', className, withBreakpoints(size, 'rt-r-size'))\n  }))));\n});\nDialogContent.displayName = 'DialogContent';\nconst DialogTitle = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Title, {\n  asChild: true\n}, React.createElement(Heading, {\n  size: \"5\",\n  mb: \"3\",\n  trim: \"start\",\n  ...props,\n  ref: forwardedRef\n})));\nDialogTitle.displayName = 'DialogTitle';\nconst DialogDescription = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Description, {\n  asChild: true\n}, React.createElement(Text, {\n  as: \"p\",\n  size: \"3\",\n  ...props,\n  ref: forwardedRef\n})));\nDialogDescription.displayName = 'DialogDescription';\nconst DialogClose = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Close, {\n  ...props,\n  ref: forwardedRef,\n  asChild: true\n}));\nDialogClose.displayName = 'DialogClose';\nconst Dialog = Object.assign({}, {\n  Root: DialogRoot,\n  Trigger: DialogTrigger,\n  Content: DialogContent,\n  Title: DialogTitle,\n  Description: DialogDescription,\n  Close: DialogClose\n});\nexport { Dialog, DialogRoot, DialogTrigger, DialogContent, DialogTitle, DialogDescription, DialogClose };\n//# sourceMappingURL=dialog.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}